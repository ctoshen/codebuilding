{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "Proof of concept to get API Gateway to deploy via Lambda-backed Custom Resource on Update of Paramter.",
    "Metadata"                 : {
        "LICENSE" : "Copyright 2016 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This file is licensed to you under the AWS Customer Agreement (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at http://aws.amazon.com/agreement/ . This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions and limitations under the License."
    },
    "Parameters"               : {
        "S3Bucket" : {
            "Type" : "String",
            "Default" : "api-gw-deployment",
            "Description" : "The name of the S3 bucket that contains the source code of the \"Website\" Lambda function."
        },
        "S3Key"    : {
            "Type" : "String",
            "Default" : "website.zip",
            "Description" : "The name of the \"website\" Lambda source code .zip file in S3."
        },
        "StageName" : {
            "Type" : "String",
            "Default" : "v1",
            "Description" : "The name Stage Name of the API Gateway"
        }
    },
    "Resources"                : {
        "LambdaRole" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com",
                                    "apigateway.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/",
                "Policies"                 : [
                    {
                        "PolicyName" : "logs",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : "arn:aws:logs:*:*:*"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName" : "api",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "apigateway:*"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaRole1" : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path"                     : "/",
                "Policies"                 : [
                    {
                        "PolicyName" : "api",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "*"
                                    ],
                                    "Resource" : "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "Lambda"      : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "S3Bucket" : {
                        "Ref" : "S3Bucket"
                    },
                    "S3Key"    : {
                        "Ref" : "S3Key"
                    }
                },
                "Description" : "APIDeployment Test with Custom Resource",
                "Handler"     : "index.handler",
                "MemorySize"  : 128,
                "Role"        : {
                    "Fn::GetAtt" : [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Runtime"     : "nodejs4.3",
                "Timeout"     : 31
            }
        },
        "LambdaPermission" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "Action" : "lambda:invokeFunction",
                "FunctionName" : {
                    "Fn::GetAtt" : [
                        "Lambda",
                        "Arn"
                    ]
                },
                "Principal"    : "apigateway.amazonaws.com",
                "SourceArn"    : {
                    "Fn::Join" : [
                        "",
                        [
                            "arn:aws:execute-api:",
                            {
                                "Ref" : "AWS::Region"
                            },
                            ":",
                            {
                                "Ref" : "AWS::AccountId"
                            },
                            ":",
                            {
                                "Ref" : "RestApi"
                            },
                            "/*"
                        ]
                    ]
                }
            }
        },
        "RestApi"          : {
            "Type" : "AWS::ApiGateway::RestApi",
            "Properties" : {
                "Name" : {
                    "Fn::Join" : [
                        "",
                        [
                            "DeploymentTest - ",
                            {
                                "Ref" : "AWS::StackId"
                            }
                        ]
                    ]
                },
                "Description" : "This is used to test the deployment via CloudFormation and a Custom resource"
            }
        },
        "AddUserModel"     : {
            "Type" : "AWS::ApiGateway::Model",
            "Properties" : {
                "ContentType" : "application/json",
                "Name"        : "AddUser",
                "RestApiId"   : {
                    "Ref" : "RestApi"
                },
                "Schema"      : {
                    "$schema" : "http://json-schema.org/draft-04/schema#",
                    "title"   : "AddUser",
                    "type"    : "object",
                    "additionalProperties" : false,
                    "properties"           : {
                        "rolearn" : {
                            "type" : "string"
                        }
                    },
                    "required"             : [
                        "rolearn"
                    ]
                }
            }
        },
        "UserResource"     : {
            "Type" : "AWS::ApiGateway::Resource",
            "Properties" : {
                "RestApiId" : {
                    "Ref" : "RestApi"
                },
                "ParentId"  : {
                    "Fn::GetAtt" : [
                        "RestApi",
                        "RootResourceId"
                    ]
                },
                "PathPart"  : "linkaccount"
            }
        },
        "GETMethod"        : {
            "Type" : "AWS::ApiGateway::Method",
            "Properties" : {
                "RestApiId" : {
                    "Ref" : "RestApi"
                },
                "ResourceId" : {
                    "Ref" : "UserResource"
                },
                "HttpMethod" : "GET",
                "AuthorizationType" : "NONE",
                "Integration"       : {
                    "Type" : "AWS",
                    "IntegrationHttpMethod" : "POST",
                    "Uri"                   : {
                        "Fn::Join" : [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt" : [
                                        "Lambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses"  : [
                        {
                            "ResponseTemplates" : {
                                "text/html" : "$input.path('$')"
                            },
                            "ResponseParameters" : {
                                "method.response.header.Content-Type" : "'text/html'"
                            },
                            "StatusCode"         : 200
                        },
                        {
                            "ResponseTemplates" : {
                                "application/json" : "$input.path('$.errorMessage')"
                            },
                            "SelectionPattern"  : ".*[InternalServerError].*",
                            "StatusCode"        : 500
                        },
                        {
                            "ResponseTemplates" : {
                                "application/json" : "$input.path('$.errorMessage')"
                            },
                            "SelectionPattern"  : ".*[BadRequest].*",
                            "StatusCode"        : 400
                        }
                    ],
                    "PassthroughBehavior"   : "WHEN_NO_TEMPLATES",
                    "RequestTemplates"      : {
                        "application/json" : "{\"http_method\" : \"$context.httpMethod\",\"state\" : \"$input.params('state')\",\"code\" : \"$input.params('code')\"}"
                    }
                },
                "RequestParameters" : {
                },
                "MethodResponses"   : [
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                            "method.response.header.Content-Type" : true
                        },
                        "StatusCode"         : 200
                    },
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                        },
                        "StatusCode"         : 500
                    },
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                        },
                        "StatusCode"         : 400
                    }
                ]
            }
        },
        "POSTMethod"       : {
            "Type" : "AWS::ApiGateway::Method",
            "Properties" : {
                "RestApiId" : {
                    "Ref" : "RestApi"
                },
                "ResourceId" : {
                    "Ref" : "UserResource"
                },
                "HttpMethod" : "POST",
                "AuthorizationType" : "NONE",
                "Integration"       : {
                    "Type" : "AWS",
                    "IntegrationHttpMethod" : "POST",
                    "Uri"                   : {
                        "Fn::Join" : [
                            "",
                            [
                                "arn:aws:apigateway:",
                                {
                                    "Ref" : "AWS::Region"
                                },
                                ":lambda:path/2015-03-31/functions/",
                                {
                                    "Fn::GetAtt" : [
                                        "Lambda",
                                        "Arn"
                                    ]
                                },
                                "/invocations"
                            ]
                        ]
                    },
                    "IntegrationResponses"  : [
                        {
                            "ResponseTemplates" : {
                                "text/html" : "$input.path('$')"
                            },
                            "ResponseParameters" : {
                                "method.response.header.Content-Type" : "'text/html'"
                            },
                            "StatusCode"         : 200
                        },
                        {
                            "ResponseTemplates" : {
                                "application/json" : "$input.path('$.errorMessage')"
                            },
                            "SelectionPattern"  : ".*[InternalServerError].*",
                            "StatusCode"        : 500
                        },
                        {
                            "ResponseTemplates" : {
                                "application/json" : "$input.path('$.errorMessage')"
                            },
                            "SelectionPattern"  : ".*[BadRequest].*",
                            "StatusCode"        : 400
                        },
                        {
                            "ResponseTemplates" : {
                                "application/json" : "$input.path('$context.errorType')"
                            },
                            "ResponseParameters" : {
                                "method.response.header.Location" : "integration.response.body.errorType"
                            },
                            "SelectionPattern"   : ".*[ResponseFound].*",
                            "StatusCode"         : 302
                        }
                    ],
                    "PassthroughBehavior"   : "NEVER",
                    "RequestTemplates"      : {
                        "application/x-www-form-urlencoded" : "{\"http_method\": \"$context.httpMethod\",\"body\": $input.json('$')}"
                    }
                },
                "RequestModels"     : {
                    "application/json" : {
                        "Ref" : "AddUserModel"
                    }
                },
                "MethodResponses"   : [
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                            "method.response.header.Content-Type" : true
                        },
                        "StatusCode"         : 200
                    },
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                        },
                        "StatusCode"         : 500
                    },
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                        },
                        "StatusCode"         : 400
                    },
                    {
                        "ResponseModels" : {
                        },
                        "ResponseParameters" : {
                            "method.response.header.Location" : true
                        },
                        "StatusCode"         : 302
                    }
                ]
            }
        },
        "CustomAPIDeploymentTrigger" : {
            "DependsOn" : [
                "CustomAPIDeployment",
				"GETMethod",
				"POSTMethod"
            ],
            "Type"      : "Custom::CustomAPIDeployment",
            "Properties" : {
                "ServiceToken" : {
                    "Fn::GetAtt" : [
                        "CustomAPIDeployment",
                        "Arn"
                    ]
                },
                "RESTAPI"      : {
                    "Ref" : "RestApi"
                },
                "STAGENAME"    : {
                    "Ref" : "StageName"
                }
            }
        },
        "CustomAPIDeployment"        : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n",
                            [
                                "var response = require('cfn-response');",
                                "var aws = require('aws-sdk');",
                                "exports.handler = function(event, context) {",
                                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                                "    if (event.RequestType == 'Delete') {",
                                "        console.log('Delete Request Recived, CloudFormation will take care of the rest');",
                                "        response.send(event, context, response.SUCCESS);",
                                "        return;",
                                "    }",
                                "    var RestApiId = event.ResourceProperties.RESTAPI;",
                                "    var StageName = event.ResourceProperties.STAGENAME ;",
                                "    var responseData = {};",
                                "    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
                                "        var apigateway = new aws.APIGateway();",
                                "    apigateway.createDeployment({",
                                "        restApiId: RestApiId,",
                                "        stageName: StageName",
                                "    }, function(err, data) {",
                                "        if (err) {",
                                "            console.log(err.stack);",
                                "        responseData = {Error: 'Unable to Create APIGateway Deployment'};",
                                "        response.send(event, context, response.FAILED, responseData);",
                                "        return;",
                                "        }",
                                "        console.log('DEPLOYED API Gateway');",
                                "        console.log(data);",
                                "        responseData = data;",
                                "        response.send(event, context, response.SUCCESS, responseData);",
                                "    });}",
                                "        else {",
                                "        responseData = {Error: 'Not all parameters specified'};",
                                "        console.log(responseData.Error);",
                                "        response.send(event, context, response.FAILED, responseData);",
                                "    }",
                                "};"
                            ]
                        ]
                    }
                },
                "Handler" : "index.handler",
                "MemorySize" : 128,
                "Role"       : {
                    "Fn::GetAtt" : [
                        "LambdaRole1",
                        "Arn"
                    ]
                },
                "Runtime"    : "nodejs4.3",
                "Timeout"    : 100
            }
        }
    },
    "Outputs"                  : {
        "RedirectUri" : {
            "Value" : {
                "Fn::Join" : [
                    "",
                    [
                        "https://",
                        {
                            "Ref" : "RestApi"
                        },
                        ".execute-api.",
                        {
                            "Ref" : "AWS::Region"
                        },
                        ".amazonaws.com/v1/linkaccount"
                    ]
                ]
            }
        },
        "DeploymentID" : {
            "Value" : {
                "Fn::GetAtt" : [
                    "CustomAPIDeploymentTrigger",
                    "id"
                ]
            }
        },
        "DeploymentCreateTime" : {
            "Value" : {
                "Fn::GetAtt" : [
                    "CustomAPIDeploymentTrigger",
                    "createdDate"
                ]
            }
        }
    }
}
